// GET all products
app.get('/api/products', (req, res) => {
  const sql = "SELECT id, product_name AS item, quantity, selling_price, DATE_FORMAT(date, '%m-%d-%Y') AS date FROM inventory_bookstore";
  db.query(sql, (err, results) => {
    if (err) {
      console.error("Error fetching products:", err);
      res.status(500).json({ error: "Failed to fetch products" });
      return;
    }
    res.json(results);
  });
});

// POST (add) a new product
app.post('/api/products', (req, res) => {
  const { item, quantity, selling_price } = req.body;

  if (!item || quantity === undefined || selling_price === undefined) {
    return res.status(400).json({ error: "Item name, quantity, and selling price are required." });
  }
  if (isNaN(quantity) || isNaN(selling_price)) {
    return res.status(400).json({ error: "Quantity and selling price must be valid numbers." });
  }

  const sql = "INSERT INTO inventory_bookstore (product_name, quantity, selling_price, date) VALUES (?, ?, ?, NOW())";
  db.query(sql, [item, quantity, selling_price], (err, result) => {
    if (err) {
      console.error("Error adding product:", err);
      res.status(500).json({ error: "Failed to add product" });
      return;
    }
    const newProduct = {
      id: result.insertId,
      item: item,
      quantity: quantity,
      selling_price: selling_price,
      date: new Date().toLocaleDateString('en-US', {
        month: '2-digit',
        day: '2-digit',
        year: 'numeric',
      })
    };
    res.status(201).json(newProduct);
  });
});

// PUT (update) an existing product
app.put('/api/products/:id', (req, res) => {
  const productId = parseInt(req.params.id, 10);
  const { item, quantity, selling_price } = req.body;

  if (isNaN(selling_price)) {
    console.error("Invalid selling price:", selling_price);
    return res.status(400).json({ error: "Selling price must be a valid number." });
  }

  const sql = "UPDATE inventory_bookstore SET product_name = ?, quantity = ?, selling_price = ? WHERE id = ?";
  db.query(sql, [item, quantity, selling_price, productId], (err, result) => {
    if (err) {
      console.error("Error updating product:", err);
      return res.status(500).json({ error: "Failed to update product" });
    }
    if (result.affectedRows === 0) {
      return res.status(404).json({ error: "Product not found" });
    }
    res.status(200).json({ message: "Product updated successfully" });
  });
});

// DELETE a product
app.delete('/api/products/:id', (req, res) => {
  const productId = parseInt(req.params.id, 10);
  const sql = "DELETE FROM inventory_bookstore WHERE id = ?";
  db.query(sql, [productId], (err, result) => {
    if (err) {
      console.error("Error deleting product:", err);
      res.status(500).json({ error: "Failed to delete product" });
      return;
    }
    if (result.affectedRows === 0) {
      res.status(404).json({ error: "Product not found" });
    } else {
      res.status(200).json({ message: 'Product deleted successfully' });
    }
  });
});

// GET total supplies
app.get('/api/total-supplies', (req, res) => {
  const sql = "SELECT SUM(quantity) AS totalSupplies FROM inventory_bookstore";
  db.query(sql, (err, results) => {
    if (err) {
      console.error("Error fetching total supplies:", err);
      res.status(500).json({ error: "Failed to fetch total supplies" });
      return;
    }
    const totalSupplies = results[0].totalSupplies || 0;
    res.json({ totalSupplies });
  });
});

// GET low stock items
app.get('/api/low-stock', (req, res) => {
  const sql = "SELECT COUNT(*) AS lowStockItems FROM inventory_bookstore WHERE quantity <= 10";
  db.query(sql, (err, results) => {
    if (err) {
      console.error("Error fetching low stock items:", err);
      res.status(500).json({ error: "Failed to fetch low stock items" });
      return;
    }
    const lowStockItems = results[0].lowStockItems;
    res.json({ lowStockItems });
  });
});



// GET user details and credits by RFID
app.get('/api/user/:rfid', (req, res) => {
    const rfid = req.params.rfid;
    const userSql = "SELECT fname, lname FROM user WHERE rfid = ?";
    db.query(userSql, [rfid], (err, userResults) => {
        if (err) {
            console.error("Error fetching user details:", err);
            return res.status(500).json({ error: "Failed to fetch user details" });
        }
        if (userResults.length === 0) {
            return res.status(404).json({ error: "User not found" });
        }
        const user = userResults[0];
        // Use IFNULL to default NULL sums to 0
        const creditSql = "SELECT IFNULL(SUM(credit), 0) - IFNULL(SUM(debit), 0) AS availableCredits FROM wispay WHERE rfid = ?";
        db.query(creditSql, [rfid], (err, creditResults) => {
            if (err) {
                console.error("Error fetching user credits:", err);
                return res.status(500).json({ error: "Failed to fetch user credits" });
            }
            const availableCredits = creditResults[0].availableCredits || 0;
            res.json({
                fname: user.fname,
                lname: user.lname,
                availableCredits: availableCredits
            });
        });
    });
});

// POST: Subtract credits from the user by inserting a debit record
app.post('/api/user/:rfid/debit', (req, res) => {
    const rfid = req.params.rfid;
    const { amount } = req.body;

    console.log(`Debit request for RFID: ${rfid}, Amount: ${amount}`); // Fixed template literal

    if (!amount || isNaN(amount)) {
        return res.status(400).json({ error: 'Invalid amount' });
    }

    const sql = "INSERT INTO wispay (rfid, debit, credit) VALUES (?, ?, 0)";
    db.query(sql, [rfid, amount], (err, result) => {
        if (err) {
            console.error("Error subtracting credits:", err);
            return res.status(500).json({ error: "Failed to subtract credits" });
        }
        console.log("Debit record inserted successfully:", result); // Debug

        // IMPORTANT:  Return the new available credits!
        const creditSql = "SELECT IFNULL(SUM(credit), 0) - IFNULL(SUM(debit), 0) AS availableCredits FROM wispay WHERE rfid = ?";
        db.query(creditSql, [rfid], (err, creditResults) => {
            if (err) {
                console.error("Error fetching updated credits:", err);
                return res.status(500).json({ error: "Failed to fetch updated credits" });
            }
            const newAvailableCredits = creditResults[0].availableCredits || 0;
            res.status(201).json({ message: "Credits subtracted successfully", availableCredits: newAvailableCredits });
        });
    });
});

app.listen(port, () => {
  console.log(`Server listening on port ${port}`);
});
